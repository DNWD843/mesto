/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/scripts/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/pages/index.css":
/*!*****************************!*\
  !*** ./src/pages/index.css ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin\n\n//# sourceURL=webpack:///./src/pages/index.css?");

/***/ }),

/***/ "./src/scripts/components/Api.js":
/*!***************************************!*\
  !*** ./src/scripts/components/Api.js ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Api; });\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\r\n * @module Api\r\n * @description  Класс Api<br>\r\n * Отвечает за отправку запросов на сервер и проверку полученных ответов\r\n * @param {Object} Object - принимает в конструктор объект { URLs, headers, token } \r\n * @param {Object} Object.URLs  - объект, содержащий адреса для отправки запросов\r\n * @param {Object} Object.headers  - объект, содержащий заголовки запросов\r\n * @param {String} Object.token  - токен для доступа на сервер\r\n * @example\r\n * const api = new Api({\r\n * URLs: {\r\n *   baseURL: 'https://mesto...',\r\n *   cardsURL: 'https://mesto.../cards/',\r\n *   userURL: 'https://mesto.../users/me',\r\n *   likesURL: 'https://mesto.../cards/likes/',\r\n *   avatarURL: 'https://mesto.../users/me/avatar'\r\n * },\r\n * headers: {\r\n *   \"authorization\": '<Ваш код авторизации>'\r\n * },\r\n * token: '<Ваш токен>'\r\n * });\r\n */\nvar Api = /*#__PURE__*/function () {\n  function Api(_ref) {\n    var URLs = _ref.URLs,\n        headers = _ref.headers,\n        token = _ref.token;\n\n    _classCallCheck(this, Api);\n\n    this._baseURL = URLs.baseURL;\n    this._cardsURL = URLs.cardsURL;\n    this._userURL = URLs.userURL;\n    this._likesURL = URLs.likesURL;\n    this._avatarURL = URLs.avatarURL;\n    this._headers = headers;\n    this._token = token;\n  }\n  /**\r\n   * @description  Публичный метод<br>\r\n   * Загружает с сервера данные пользователя\r\n   * @public\r\n   * @returns {Promise} - возвращает промис с данными пользователя\r\n   * \r\n   */\n\n\n  _createClass(Api, [{\n    key: \"loadUserData\",\n    value: function loadUserData() {\n      //Отправляется запрос на получение данных пользователя\n      return fetch(this._userURL, {\n        headers: {\n          authorization: this._token\n        }\n      }) //Полученный промис передается в обработчик then, где проверяется статус ответа сервера\n      .then(function (res) {\n        //Если ответ положительный (сервер удачно отправил ответ),\n        // применяем метод .json(), который вернет новый промис с данными ответа\n        if (res.ok) {\n          return res.json();\n        } //Если сервер прислал ошибку - отклоняем промис и передаем ошибку в обработчик\n\n\n        return Promise.reject(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \".concat(res.status));\n      });\n    }\n    /**\r\n     * @description  Публичный метод<br>\r\n     * Загружает элементы с сервера\r\n     * @public\r\n     * @returns {Promise} - возвращает промис с данными элементов, сохраненных на сервере\r\n     * \r\n     */\n\n  }, {\n    key: \"loadCards\",\n    value: function loadCards() {\n      //Отправляется запрос на получение данных имеющихся на сервере элементов\n      return fetch(this._cardsURL, {\n        headers: {\n          authorization: this._token\n        }\n      }) //Полученный промис передается в обработчик then, где проверяется статус ответа сервера\n      .then(function (res) {\n        //Если ответ положительный (сервер удачно отправил ответ),\n        // применяем метод .json(), который вернет новый промис с данными ответа\n        if (res.ok) {\n          return res.json();\n        } //Если сервер прислал ошибку - отклоняем промис и передаем ошибку в обработчик\n\n\n        return Promise.reject(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \".concat(res.status));\n      });\n    }\n    /**\r\n     * @description Публичный метод<br>\r\n     * Сохраняет на сервер элемент, добавленный через Форму добавления нового элемента<br>\r\n     * Принимает аргументом объект item\r\n     * @public\r\n     * @param {Object} item : - объект с параметрами элемента\r\n     * @param {String} item.name - название элемента из инпута Формы добавления нового элемента\r\n     * @param {String} item.link - ссылка на изображение элемента из инпута Формы добавления нового элемента\r\n     * @returns {Promise} - возвращает промис, содержащий данные нового элемента, полученные от сервера\r\n     * @example\r\n     * api.addNewCard({name: <название элемента>, link: <ссылка на изображение элемента>})\r\n     */\n\n  }, {\n    key: \"addNewCard\",\n    value: function addNewCard(item) {\n      //Отправляется запрос на добавление элемента\n      return fetch(this._cardsURL, {\n        //метод отправки запроса POST\n        method: 'POST',\n        headers: {\n          authorization: this._token,\n          //тип контента\n          'Content-Type': 'application/json'\n        },\n        //заголовок body - содержит данные нового элемента, полученные из Формы добавления нового элемента\n        //метод JSON.stringify переводит данные в строковый формат для отправки по протоколу HTTP\n        body: JSON.stringify({\n          name: item.name,\n          link: item.link\n        })\n      }).then(function (res) {\n        //Если ответ положительный (сервер удачно отправил ответ),\n        // применяем метод .json(), который вернет новый промис с данными ответа\n        if (res.ok) {\n          return res.json();\n        } //Если сервер прислал ошибку - отклоняем промис и передаем ошибку в обработчик\n\n\n        return Promise.reject(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \".concat(res.status));\n      });\n    }\n    /**\r\n     * @description Публичный метод<br>\r\n     * Удаляет элемент с сервера<br>\r\n     * Принимает аргументом id удаляемого элемента\r\n     * @public\r\n     * @param {String} cardId : - id удаляемого элемента\r\n     * @returns {Promise} - возвращает промис с сообщением об успешном удалении элемента\r\n     */\n\n  }, {\n    key: \"deleteCard\",\n    value: function deleteCard(cardId) {\n      //Отправляется запрос на удаление элемента\n      return fetch(\"\".concat(this._cardsURL).concat(cardId), {\n        //метод отправки запроса DELETE\n        method: 'DELETE',\n        headers: {\n          authorization: this._token\n        }\n      }).then(function (res) {\n        //Если ответ положительный (сервер удачно отправил ответ),\n        // применяем метод .json(), который вернет новый промис с данными ответа\n        if (res.ok) {\n          return res.json();\n        } //Если сервер прислал ошибку - отклоняем промис и передаем ошибку в обработчик\n\n\n        return Promise.reject(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \".concat(res.status));\n      });\n    }\n    /**\r\n     * @description Публичный метод<br>\r\n     * Редактирует данные в профиле пользователя на сервере<br>\r\n     * Принимает арументом объект с новыми данными пользователя, веденными через Форму редактирования профиля\r\n     * @public\r\n     * @param {Object} Object : - { name, job } - объект с новыми данными пользователя\r\n     * @param {String} Object.name - новое имя пользователя, введенное в Форму редактирования профиля\r\n     * @param {String} Object.job - новое описание пользователя, введенное в Форму редактирования профиля\r\n     * @returns {Promise} - возвращает промис, содержащий новые данные пользователя, сохраненные на сервере\r\n     * @example\r\n     * api.editProfile({ \r\n     *   name: <новое имя пользователя, введенное в инпут Формы редактирования профиля>, \r\n     *   job: <новое описание пользователя, введенное в инпут Формы редактирования профиля >\r\n     * });\r\n     */\n\n  }, {\n    key: \"editProfile\",\n    value: function editProfile(_ref2) {\n      var name = _ref2.name,\n          job = _ref2.job;\n      //Отправляется запрос на редактирование данных пользователя\n      return fetch(\"\".concat(this._userURL), {\n        //метод запроса PATCH\n        method: 'PATCH',\n        headers: {\n          authorization: this._token,\n          //тип контента\n          'Content-Type': 'application/json'\n        },\n        //заголовок body - содержит новые данные пользователя, полученные из Формы редактирования профиля\n        //метод JSON.stringify переводит данные в строковый формат для отправки по протоколу HTTP\n        body: JSON.stringify({\n          name: name,\n          about: job\n        })\n      }).then(function (res) {\n        //Если ответ положительный (сервер удачно отправил ответ),\n        // применяем метод .json(), который вернет новый промис с данными ответа\n        if (res.ok) {\n          return res.json();\n        } //Если сервер прислал ошибку - отклоняем промис и передаем ошибку в обработчик\n\n\n        return Promise.reject(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \".concat(res.status));\n      });\n    }\n    /**\r\n     * @description Публичный метод<br>\r\n     * Загружает на сервер данные о нажатии кнопи \"лайк\" на элементе<br>\r\n     * Принимает аргументом id элемента, на котором произошло нажатие \"лайка\" \r\n     * @public\r\n     * @param {String} id - id элемента, на котором произошло нажатие \"лайка\"\r\n     * @returns {Promise} - возвращает промис, содержащий новые данные пользователя, сохраненные на сервере\r\n     */\n\n  }, {\n    key: \"loadLike\",\n    value: function loadLike(id) {\n      //Отправляется запрос на сохранение данных о \"лайке\"\n      return fetch(\"\".concat(this._likesURL).concat(id), {\n        //метод запроса PUT\n        method: 'PUT',\n        headers: {\n          authorization: this._token\n        }\n      }).then(function (res) {\n        //Если ответ положительный (сервер удачно отправил ответ),<br>\n        //применяем метод .json(), который вернет новый промис с данными ответа\n        if (res.ok) {\n          return res.json();\n        } //Если сервер прислал ошибку - отклоняем промис и передаем ошибку в обработчик\n\n\n        return Promise.reject(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \".concat(res.status));\n      });\n    }\n    /**\r\n     * @description Публичный метод<br>\r\n     * Удаляет с сервера данные о \"лайке\" на элементе<br>\r\n     * Принимает аргументом id элемента, на котором произошло нажатие \"лайка\" \r\n     * @public\r\n     * @param {String} id - id элемента, на котором произошло нажатие \"лайка\"\r\n     * @returns {Promise} - возвращает промис, содержащий новые данные пользователя, сохраненные на сервере\r\n     */\n\n  }, {\n    key: \"deleteLike\",\n    value: function deleteLike(id) {\n      return fetch(\"\".concat(this._likesURL).concat(id), {\n        //метод запроса DELETE\n        method: 'DELETE',\n        headers: {\n          authorization: this._token\n        }\n      }).then(function (res) {\n        //Если ответ положительный (сервер удачно отправил ответ),<br>\n        //применяем метод .json(), который вернет новый промис с данными ответа\n        if (res.ok) {\n          return res.json();\n        } //Если сервер прислал ошибку - отклоняем промис и передаем ошибку в обработчик\n\n\n        return Promise.reject(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \".concat(res.status));\n      });\n    }\n    /**\r\n     * @description Публичный метод<br>\r\n     * Сохраняет на сервер новую ссылку на аватар пользователя<br>\r\n     * Принимает аргументом ссылку на новый аватар пользователя, полученную из Формы редактирования аватара\r\n     * @public\r\n     * @param {String} avatar - новая ссылка на аватар пользователя, полученная из Формы редактирования аватара\r\n     * @returns {Promise} - возвращает промис, содержащий новые данные пользователя, сохраненные на сервере\r\n     */\n\n  }, {\n    key: \"editAvatar\",\n    value: function editAvatar(avatar) {\n      return fetch(\"\".concat(this._avatarURL), {\n        //метод запроса PATCH\n        method: 'PATCH',\n        headers: {\n          authorization: this._token,\n          //тип контента\n          'Content-Type': 'application/json'\n        },\n        //заголовок body - содержит новую ссылку на аватар пользователя, полученную из Формы редактирования аватара\n        //метод JSON.stringify переводит данные в строковый формат для отправки по протоколу HTTP\n        body: JSON.stringify({\n          avatar: avatar\n        })\n      }).then(function (res) {\n        //Если ответ положительный (сервер удачно отправил ответ),<br>\n        //применяем метод .json(), который вернет новый промис с данными ответа\n        if (res.ok) {\n          return res.json();\n        } //Если сервер прислал ошибку - отклоняем промис и передаем ошибку в обработчик\n\n\n        return Promise.reject(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \".concat(res.status));\n      });\n    }\n  }]);\n\n  return Api;\n}();\n\n\n\n//# sourceURL=webpack:///./src/scripts/components/Api.js?");

/***/ }),

/***/ "./src/scripts/components/Card.js":
/*!****************************************!*\
  !*** ./src/scripts/components/Card.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Card; });\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\r\n * @module Card\r\n * @description Класс Card<br>\r\n * Создает экземпляр элемента (карточки)<br>\r\n * Принимает в конструктор объект с данными для создания карточки и коллбэками, селекторы элементов карточки, идентификаторы состояния\r\n * @param {Object} Object : - объект с основными данными карточки и коллбэками\r\n    @param {Object} Object.data - { title, link, id } - объект с данными карточки, необходимыми для ее создания\r\n    @param {String} Object.data.title - название карточки\r\n\t\t@param {String} Object.data.link - ссылка на изображение карточки\r\n\t\t@param {String} Object.data.id - идентификатор карточки\r\n    @param {Function} Object.handleCardClick - обработчик клика по изображению карточки\r\n    @param {Function} Object.handleClickDeleteIcon - обработчик клика по иконке удаления карточки\r\n    @param {Function} Object.setSubmitAction - коллбэк, определяющий функцию-обработчик при подтверждении удаления карточки \r\n    @param {Function} Object.handleClickLikeIcon - обработчик клика по иконке \"лайк\"\r\n * @param {String} cardTemplateSelector - селектор шаблона элемента карточки\r\n * @param {Object} cardElementsSelectors : - объект, содержащий селекторы элементов карточки\r\n    @param {String} cardElementsSelectors.cardSelector - селектор карточки\r\n    @param {String} cardElementsSelectors.deleteIconSelector - селектор иконки удаления \r\n    @param {String} cardElementsSelectors.cardImageSelector - селектор изображения карточки\r\n    @param {String} cardElementsSelectors.likeIconSelector - селектор иконки \"лайк\"\r\n    @param {String} cardElementsSelectors.cardTitleSelector - селектор элемента названия карточки\r\n    @param {String} cardElementsSelectors.isLikedModifier - модификатор, окрашивающий \"лайк\" в черный цвет, если \"лайк\" в активном состоянии\r\n    @param {String} cardElementsSelectors.likeCounterSelector - селектор счетчика \"лайков\"\r\n    @param {String} cardElementsSelectors.delButtonEnabledSelector - селектор активного состояния иконки удаления\r\n * @param {Boolean} isOwner - идентификатор владельца:<br>&nbsptrue - если пользователь является владельцем карточки,<br>&nbspfalse - если пользователь не является владельцем карточки\r\n * @param {Boolean} isLiked - идентификатор состояния кнопки \"лайк\":<br>&nbsptrue - если \"лайк\" нажат,<br>&nbspfalse - если \"лайк\" не нажат\r\n * @param {Number} likesQuantity - число - количество \"лайков\", поставленных пользователями данной карточке\r\n */\nvar Card = /*#__PURE__*/function () {\n  function Card(_ref, cardTemplateSelector, cardElementsSelectors, isOwner, isLiked, likesQuantity) {\n    var data = _ref.data,\n        handleCardClick = _ref.handleCardClick,\n        handleClickDeleteIcon = _ref.handleClickDeleteIcon,\n        setSubmitAction = _ref.setSubmitAction,\n        handleClickLikeIcon = _ref.handleClickLikeIcon;\n\n    _classCallCheck(this, Card);\n\n    this._data = data;\n    this._handleCardClick = handleCardClick;\n    this._handleClickDeleteIcon = handleClickDeleteIcon;\n    this._setSubmitAction = setSubmitAction;\n    this._handleClickLikeIcon = handleClickLikeIcon;\n    this._cardTemplateSelector = cardTemplateSelector;\n    this._cardSelector = cardElementsSelectors.cardSelector;\n    this._deleteIconSelector = cardElementsSelectors.deleteIconSelector;\n    this._cardImageSelector = cardElementsSelectors.cardImageSelector;\n    this._likeIconSelector = cardElementsSelectors.likeIconSelector;\n    this._cardTitleSelector = cardElementsSelectors.cardTitleSelector;\n    this._isLikedModifier = cardElementsSelectors.isLikedModifier;\n    this._likeCounterSelector = cardElementsSelectors.likeCounterSelector;\n    this._delButtonEnabledSelector = cardElementsSelectors.delButtonEnabledSelector;\n    this._isOwner = isOwner;\n    this._isLiked = isLiked;\n    this._likesQuantity = likesQuantity;\n    this._cardId = this._data.id;\n  }\n  /**\r\n   * @description Приватный метод<br>\r\n   * Возвращает DOM-ноду элемента из шаблона\r\n   * @private\r\n   */\n\n\n  _createClass(Card, [{\n    key: \"_getTemplate\",\n    value: function _getTemplate() {\n      var cardElement = document.querySelector(this._cardTemplateSelector).content.querySelector(this._cardSelector).cloneNode(true);\n      return cardElement;\n    }\n    /**\r\n     * @description Приватный метод<br>\r\n     * Устанавливает слушатели на элементы карточки:<br>\r\n     * &nbsp клик по изображению<br>\r\n     * &nbsp клик по иконке \"лайк\"<br>\r\n     * &nbsp клик по иконке \"удалить\", если это карточка владельца аккаунта <br>\r\n     * @private\r\n     */\n\n  }, {\n    key: \"_setEventListeners\",\n    value: function _setEventListeners() {\n      var _this = this;\n\n      //Слушатель на клик по изображению\n      this._cardImage.addEventListener('click', function () {\n        _this._handleCardClick(_this._data);\n      }); //Слушатель на клик по иконке \"лайк\"\n\n\n      this._likeIcon.addEventListener('click', function () {\n        _this._handleClickLikeIcon(_this._cardId, _this._likeIcon, _this._likeCounter, _this._isLikedModifier, _this._isLiked); //Меняем состояние идентификатора isLiked карточки на противоположное, т.к. произошло нажатие на \"лайк\"\n        //Это необходимо для корректной отрисовки карточек при обновлении страницы\n\n\n        _this._isLiked = !_this._isLiked;\n      }); //Если пользователь является владельцем карточки, то он может ее удалять\n      //Поэтому, в этом случае устанавливаем слушатель на клик по иконке \"удалить\"\n\n\n      if (this._isOwner) {\n        this._deleteIcon.addEventListener('click', function () {\n          //коллбэк, который определяет непосредственно действие при подтверждении намерения удалить карточку\n          //Подтверждением намерения удалить карточку служит нажатие кнопки \"Да\" в попапе подтверждения удаления,\n          //т.е. событие submit модального окна подтверждения удаления карточки\n          _this._setSubmitAction(_this._cardId, _this._element);\n\n          _this._handleClickDeleteIcon();\n        });\n      }\n    }\n    /**\r\n     * @description Публичный метод<br>\r\n     * Создает и возвращает наполненный контентом элемент карточки с установленными слушателями событий\r\n     * @public\r\n     * @example\r\n     * const cardElementsSelectors = {\r\n     *   cardSelector: '.someSelector',\r\n     *   deleteIconSelector: '.someSelector',\r\n     *   cardImageSelector: '.someSelector',\r\n     *   likeIconSelector: '.someSelector',\r\n     *   cardTitleSelector: '.someSelector',\r\n     *   isLikedModifier: 'someModifier',\r\n     *   likeCounterSelector: '.someSelector',\r\n     *   delButtonEnabledSelector: '.someSelector'\r\n     * };\r\n     * \r\n     * const card = new Card({\r\n     *   data: someCardData,\r\n     *   handleCardClick: someCallback,\r\n     *   handleClickDeleteIcon: someCallback,\r\n     *   setSubmitAction: someCallback,\r\n     *   handleClickLikeIcon: someCallback\r\n     * },\r\n     *   cardTemplateSelector, cardElementsSelectors, isOwner, isLiked, likesQuantity\r\n     * );\r\n     */\n\n  }, {\n    key: \"generateCard\",\n    value: function generateCard() {\n      this._element = this._getTemplate();\n      this._cardImage = this._element.querySelector(this._cardImageSelector);\n      this._likeIcon = this._element.querySelector(this._likeIconSelector);\n      this._likeCounter = this._element.querySelector(this._likeCounterSelector);\n      this._deleteIcon = this._element.querySelector(this._deleteIconSelector);\n      this._cardImage.src = this._data.link;\n      this._cardImage.alt = this._data.title;\n      this._element.querySelector(this._cardTitleSelector).textContent = this._data.title; //Если пользователь не является владельцем карточки, иконка \"удалить\" ему недоступна\n\n      if (this._isOwner) {\n        this._deleteIcon.classList.add(this._delButtonEnabledSelector);\n      } //Если пользователь \"лайкал\" карточку, то \"лайк\" будет отрисован как нажатый\n\n\n      if (this._isLiked) {\n        this._likeIcon.classList.add(this._isLikedModifier);\n      } //счетчик \"лайков\" получает актуальное значение количества \"лайков\"\n\n\n      this._likeCounter.textContent = this._likesQuantity;\n\n      this._setEventListeners();\n\n      return this._element;\n    }\n  }]);\n\n  return Card;\n}();\n\n\n\n//# sourceURL=webpack:///./src/scripts/components/Card.js?");

/***/ }),

/***/ "./src/scripts/components/FormValidator.js":
/*!*************************************************!*\
  !*** ./src/scripts/components/FormValidator.js ***!
  \*************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return FormValidator; });\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\r\n * @module FormValidator\r\n * @description Класс FormValidator<br>\r\n * Определяет логику валидации форм в модальных окнах приложения<br>\r\n * Для каждой формы создается свой экземпляр класса FormValidator<br>\r\n * Класс имеет один публичный метод, запускающий валидацию - enableValidation()<br>\r\n * Класс принимает в конструктор объект настроек config и DOM-ноду формы, для которой необходимо запустить валидацию\r\n * @param {Object} config - объект настроек валидации, содержит селекторы элементов и классы, необходимые для валидации\r\n * @param {String} config.inputSelector - селектор инпута формы, общий для всех инпутов\r\n * @param {String} config.submitButtonSelector - селектор кнопки отправки формы (submit)\r\n * @param {String} config.inactiveButtonClass - css класс, устанавливающй неактивное состояние кнопки submit\r\n * @param {String} config.inputErrorClass - css класс, устанавливающй невалидное состояние инпута\r\n * @param {String} config.errorClass - css класс, устанавливающй активное состояние элемента, содержащего текст ошибки\r\n * @param {HTMLElement} formNode - DOM-нода формы, для которой необходимо запустить валидацию\r\n */\nvar FormValidator = /*#__PURE__*/function () {\n  function FormValidator(config, formNode) {\n    _classCallCheck(this, FormValidator);\n\n    this._inputSelector = config.inputSelector;\n    this._submitButtonSelector = config.submitButtonSelector;\n    this._inactiveButtonClass = config.inactiveButtonClass;\n    this._inputErrorClass = config.inputErrorClass;\n    this._errorClass = config.errorClass;\n    this._formElement = formNode;\n  }\n  /**\r\n   * @description Приватный метод<br>\r\n   * Метод вывода сообщения об ошибке\r\n   * @private\r\n   * @param {HTMLElement} inputElement - инпут формы (один из нескольких или единственный)\r\n   * @param {String} errorMesage - сообщение об ошибке\r\n   */\n\n\n  _createClass(FormValidator, [{\n    key: \"_showInputError\",\n    value: function _showInputError(inputElement, errorMesage) {\n      //DOM-элемент, содержащий текст ошибки, ищется и сохраняется в локальную переменную\n      var errorElement = this._formElement.querySelector(\"#\".concat(inputElement.id, \"-error\")); //проверяемый инпут не прошел валидацию и ему добавляется класс, устанавливающий стиль для невалидного инпута\n\n\n      inputElement.classList.add(this._inputErrorClass); //в DOM-элемент, содержащий текст ошибки, записывается текст ошибки\n\n      errorElement.textContent = errorMesage; //DOM-элементу, содержащему текст ошибки, добавляется класс, устанавливающий стиль для отображения ошибки\n\n      errorElement.classList.add(this._errorClass);\n    }\n    /**\r\n     * @description Приватный метод<br>\r\n     * Метод скрытия сообщения об ошибке\r\n     * @private\r\n     * @param {HTMLElement} inputElement - инпут формы (один из нескольких или единственный)\r\n     */\n\n  }, {\n    key: \"_hideInputError\",\n    value: function _hideInputError(inputElement) {\n      //DOM-элемент, содержащий текст ошибки, ищется и сохраняется в локальную переменную\n      var errorElement = this._formElement.querySelector(\"#\".concat(inputElement.id, \"-error\")); //проверяемый инпут прошел валидацию и у него удаляется класс, устанавливающий стиль для невалидного инпута\n\n\n      inputElement.classList.remove(this._inputErrorClass); //у DOM-элемента, содержащего текст ошибки, удаляется класс, устанавливающий стиль для отображения ошибки\n\n      errorElement.classList.remove(this._errorClass); //в DOM-элементе, содержащем текст ошибки, стирается текст ошибки - записывается пустая строка\n\n      errorElement.textContent = '';\n    }\n    /**\r\n     * @description Приватный метод<br>\r\n     * Метод проверки валидности инпутов в форме<br>\r\n     * Метод как бы отвечает на вопрос: этот инпут валиден?<br>\r\n     * &nbsp Если да, то для этого инпута вызывается приватный метод скрытия ошибок _hideInputError<br>\r\n     * &nbsp Если нет, то для этого инпута вызывается приватный метод отображения ошибок _showInputError<br>\r\n     * @private \r\n     * @param {HTMLElement} inputElement - инпут формы (один из нескольких или единственный)\r\n     */\n    //\n\n  }, {\n    key: \"_isInputValid\",\n    value: function _isInputValid(inputElement) {\n      if (!inputElement.validity.valid) {\n        this._showInputError(inputElement, inputElement.validationMessage);\n      } else {\n        this._hideInputError(inputElement);\n      }\n    }\n    /**\r\n     * @description Приватный метод<br>\r\n     * Метод проверки наличия невалидных инпутов в форме<br>\r\n     * Метод перебирает все инпуты формы и проверяет каждый на валидность<br>\r\n     * Метод как бы отвечает на вопрос: в этой форме есть хотя бы один невалидный инпут?<br>\r\n     * Возвращает true, если в форме есть хотя бы один невалидный инпут<br>\r\n     * Возвращает false, если в форме нет ни одного невалидного инпута\r\n     * @private \r\n     */\n\n  }, {\n    key: \"_hasInvalidInput\",\n    value: function _hasInvalidInput(inputList) {\n      return inputList.some(function (inputElement) {\n        //Валидность инпута определяем по состоянию свойства validity объекта ValidityState\n        return !inputElement.validity.valid;\n      });\n    }\n    /**\r\n     * @description Приватный метод<br>\r\n     * Изменяет состояние кнопки отправки формы (submit) в зависимости от валидности или невалидности инпутов формы<br>\r\n     * Если форма содержит хотя бы один невалидный инпут, кнопка submit становится неактивной\r\n     * @private\r\n     * @param {Array} inputList - массив инпутов формы\r\n     * @param {HTMLElement} buttonElement - DOM-элемент кнопки отправки формы (submit) \r\n     */\n\n  }, {\n    key: \"_toggleButtonState\",\n    value: function _toggleButtonState(inputList, buttonElement) {\n      //Проврка наличия хотя бы одного невалидного инпута в форме\n      if (this._hasInvalidInput(inputList)) {\n        //Если хотя бы один невалидный инпут есть, кнопка submit становится неактивной\n        buttonElement.classList.add(this._inactiveButtonClass);\n        buttonElement.setAttribute('disabled', true);\n      } else {\n        //Если все инпуты формы валидны, кнопка submit становится активной\n        buttonElement.classList.remove(this._inactiveButtonClass);\n        buttonElement.removeAttribute('disabled');\n      }\n    }\n    /**\r\n     * @description Приватный метод<br>\r\n     * Метод сброса валидации<br>\r\n     * Если пользователь заполнял форму, но передумал отправлять данные и закрыл ее, то, несмотря на очистку инпутов при открытии форм,<br>\r\n     * в форме остаются ошибки и стили невалидных инпутов.<br>\r\n     * Метод _resetValidation очищает форму от ошибок и невалидных стилей, оставшихся после предыдущего сеанса работы пользователя с формой\r\n     * @private\r\n     * @param {Array} inputList - массив инпутов формы\r\n     * @param {HTMLElement} buttonElement - DOM-элемент кнопки отправки формы (submit)\r\n     */\n\n  }, {\n    key: \"_resetValidation\",\n    value: function _resetValidation(inputList, buttonElement) {\n      var _this = this;\n\n      inputList.forEach(function (input) {\n        //Для очистки формы от ошибок и невалидных стилей используется метод _hideInputError класса FormValidator \n        _this._hideInputError(input);\n      }); //Для установки состяния кнопки submit в соответствии с текущим состоянием формы используется метод _toggleButtonState класса FormValidator\n\n      this._toggleButtonState(inputList, buttonElement);\n    }\n    /**\r\n     * @description Приватный метод<br>\r\n     * Метод установки слушателей\r\n     * @private\r\n     */\n    // \n\n  }, {\n    key: \"_setEventListeners\",\n    value: function _setEventListeners() {\n      var _this2 = this;\n\n      //Массив инпутов формы\n      var inputList = Array.from(this._formElement.querySelectorAll(this._inputSelector)); //Элемент кнопки submit\n\n      var buttonElement = this._formElement.querySelector(this._submitButtonSelector); //Элемент кнопки, открывающей форму. \n      //Каждая форма открывается своей кнопкой. Поиск элемента кнопки производится по ее id.\n      //id кнопки состоит из id формы, которую он открывает, и слова button, добавленного через дефис.\n      //id формы, в свою очередь, имеет значение равное значению атрибута name этой же формы. \n      //Это позволяет создать шаблон для поиска кнопки, открывающей конкретную форму, \n      //хотя кнопка и форма не имеют никакого родства в DOM. \n      //Пример:\n      //Форма в модальном окне:\n      //<form class=\"form ...\" name=\"add-photo-form\">\n      //Кнопка в блоке user-profile:\n      //<button type=\"button\" class=\"button ...\" name=\"add-photo-form-button\" id=\"add-photo-form-button\">\n      //Для корректной работы валидации при добавлении новых форм, необходимо придерживаться указанного порядка\n      //присваивания значений атрибутов name и id в формах и открывающих их кнопках.\n\n\n      var openFormButton = document.querySelector(\"#\".concat(this._formElement.name, \"-button\")); //Актуализируем кнопку submit  в соответствии с состоянием формы \n\n      this._toggleButtonState(inputList, buttonElement); //Перебираем все инпуты формы\n\n\n      inputList.forEach(function (inputElement) {\n        //Устанавливаем слушатели посимвольного ввода на каждый инпут\n        inputElement.addEventListener('input', function () {\n          //Проверяем валидность инпута после ввода/удаления каждого символа\n          _this2._isInputValid(inputElement); //Актуализируем кнопку submit формы в зависимости от валидности инпута\n\n\n          _this2._toggleButtonState(inputList, buttonElement);\n        });\n      }); //Слушатель клика по кнопке открытия формы\n\n      openFormButton.addEventListener('click', function () {\n        //Сбрасываем \"остатки\" прошлой валидации перед открытием формы\n        _this2._resetValidation(inputList, buttonElement);\n      });\n    }\n    /**\r\n     * @description Публичный метод<br>\r\n     * Включает валидацию формы<br>\r\n     * Включение валидации производится один раз.<br>\r\n     * Далее валидация осуществляется постоянно при взаимодействии пользователя с формой\r\n     * @public\r\n     * @example\r\n     * const config = {\r\n     *  inputSelector: '.someSelector', \r\n     *  submitButtonSelector: '.someSelector',\r\n     *  inactiveButtonClass: 'someClass',\r\n     *  inputErrorClass: 'someClass',\r\n     *  errorClass: 'someClass',\r\n     * };\r\n     * const editForm = document.querySelector('.someFormSelector');\r\n     * const editFormValidator = new FormValidator(config, editForm);\r\n     * editFormValidator.enableValidation();\r\n     */\n\n  }, {\n    key: \"enableValidation\",\n    value: function enableValidation() {\n      //Отменяем стандартное поведение формы при сабмите\n      this._formElement.addEventListener('submit', function (evt) {\n        evt.preventDefault();\n      }); //Устанавливаем слушатели событий\n\n\n      this._setEventListeners();\n    }\n  }]);\n\n  return FormValidator;\n}();\n\n\n\n//# sourceURL=webpack:///./src/scripts/components/FormValidator.js?");

/***/ }),

/***/ "./src/scripts/components/Popup.js":
/*!*****************************************!*\
  !*** ./src/scripts/components/Popup.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Popup; });\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\r\n * @module Popup\r\n * @description Класс Popup<br>\r\n * Отвечает за открытие и закрытие модальных окон (попапов)<br>\r\n * @param {String} popupSelector - селектор попапа\r\n * @param {String} closeIconSelector - селектор иконки закрытия попапа\r\n * @param {String} isOpenedModifier - модификатор, управляющий видимостью попапа. Присваивается попапу, когда нужно открыть попап.\r\n */\nvar Popup = /*#__PURE__*/function () {\n  function Popup(popupSelector, closeIconSelector, isOpenedModifier) {\n    _classCallCheck(this, Popup);\n\n    this._popupSelector = popupSelector;\n    this._closeIconSelector = closeIconSelector;\n    this.setEventListeners = this.setEventListeners.bind(this);\n    this.open = this.open.bind(this);\n    this.close = this.close.bind(this);\n    this._handleEscClose = this._handleEscClose.bind(this);\n    this._handleClickOnOverlay = this._handleClickOnOverlay.bind(this);\n    this._popup = document.querySelector(this._popupSelector);\n    this._closeIcon = this._popup.querySelector(this._closeIconSelector);\n    this._isOpenedModifier = isOpenedModifier;\n  }\n  /**\r\n   * @description Приватный метод<br>\r\n   * Обработчик нажатия на клавишу Escape<br>\r\n   * Закрывает открытый попап при нажатии на Escape\r\n   * @private\r\n   * @param {Event} evt - событие\r\n   */\n\n\n  _createClass(Popup, [{\n    key: \"_handleEscClose\",\n    value: function _handleEscClose(evt) {\n      //Если нажата клавиша Escape, закрыть попап\n      if (evt.key === 'Escape') {\n        this.close();\n      }\n    }\n    /**\r\n     * @description Приватный метод<br>\r\n     * Обработчик клика по оверлею<br>\r\n     * Закрывает открытый попап, если произошел клик по оверлею\r\n     * @private\r\n     * @param {Event} evt - событие\r\n     */\n\n  }, {\n    key: \"_handleClickOnOverlay\",\n    value: function _handleClickOnOverlay(evt) {\n      if (evt.target === evt.currentTarget) {\n        this.close();\n      }\n    }\n    /**\r\n     * @description Публичный метод<br>\r\n     * Устанавливает слушатели событий<br>\r\n     * @public\r\n     */\n\n  }, {\n    key: \"setEventListeners\",\n    value: function setEventListeners() {\n      var _this = this;\n\n      //Устанавливает слушатель события 'клик' на иконку закрытия попапа\n      this._closeIcon.addEventListener('click', function () {\n        //Если клик по иконке закрытия попапа произошел - закрыть попап\n        _this.close();\n      });\n    }\n    /**\r\n     * @description Публичный метод<br>\r\n     * Открывает попап<br>\r\n     * @public\r\n     */\n\n  }, {\n    key: \"open\",\n    value: function open() {\n      //Снимаем фокус с кнопки открытия попапа\n      document.activeElement.blur(); //Добавляем попапу модификатор открытого состояния\n\n      this._popup.classList.add(this._isOpenedModifier); //Устанавливаем слушатель события \"клик по оверлею\"\n\n\n      this._popup.addEventListener('mousedown', this._handleClickOnOverlay); //Устанавливаем слушатель события 'нажатие на клавишу Escape'\n\n\n      document.addEventListener('keydown', this._handleEscClose);\n    }\n    /**\r\n     * @description Публичный метод<br>\r\n     * Закрывает попап<br>\r\n     * @public\r\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      //Удаляем модификатор открытого состояния\n      this._popup.classList.remove(this._isOpenedModifier); //Снимаем слушатель события \"клик по оверлею\"\n\n\n      this._popup.removeEventListener('mousedown', this._handleClickOnOverlay); //Снимаем слушатель события 'нажатие на клавишу Escape'\n\n\n      document.removeEventListener('keydown', this._handleEscClose);\n    }\n  }]);\n\n  return Popup;\n}();\n\n\n\n//# sourceURL=webpack:///./src/scripts/components/Popup.js?");

/***/ }),

/***/ "./src/scripts/components/PopupConfirm.js":
/*!************************************************!*\
  !*** ./src/scripts/components/PopupConfirm.js ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return PopupConfirm; });\n/* harmony import */ var _Popup_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Popup.js */ \"./src/scripts/components/Popup.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n\n/**\r\n * @module PopupConfirm\r\n * @description Класс PopupConfirm<br>\r\n * Отвечает за попап подтверждения действия\r\n * @param {String} popupSelector - селектор попапа подтверждения действия\r\n * @param {String} closeIconSelector - селектор иконки закрытия попапа\r\n * @param {String} isOpenedModifier - модификатор открытого состояния попапа\r\n * @param {String} confirmFormSelector - селектор формы попапа подтверждения действия\r\n * @extends Popup\r\n * @see {@link Popup}\r\n */\n\nvar PopupConfirm = /*#__PURE__*/function (_Popup) {\n  _inherits(PopupConfirm, _Popup);\n\n  var _super = _createSuper(PopupConfirm);\n\n  function PopupConfirm(popupSelector, closeIconSelector, isOpenedModifier, confirmFormSelector) {\n    var _this;\n\n    _classCallCheck(this, PopupConfirm);\n\n    _this = _super.call(this, popupSelector, closeIconSelector, isOpenedModifier);\n    _this._form = document.forms[confirmFormSelector];\n    return _this;\n  }\n  /**\r\n   * @description Публичный метод<br>\r\n   * Получает коллбэк, содержащий инструкцию, что следует выполнить при сабмите формы попапа подтверждения<br>\r\n   * @public\r\n   * @param {Function} callback  - коллбэк, передаваемый в качестве обработчика слушателю события 'submit'. \r\n   * При необходимости подтверждения разных действий пользователя в коллбэке будут содержаться разные инструкции\r\n   */\n\n\n  _createClass(PopupConfirm, [{\n    key: \"setSubmitAction\",\n    value: function setSubmitAction(callback) {\n      this._submitAction = callback;\n    }\n    /**\r\n     * @description Публичный метод<br>\r\n     * Устанавливает слушатели событий<br>\r\n     * @public\r\n     */\n\n  }, {\n    key: \"setEventListeners\",\n    value: function setEventListeners() {\n      var _this2 = this;\n\n      //Вызываем родительский метод setEventListeners\n      _get(_getPrototypeOf(PopupConfirm.prototype), \"setEventListeners\", this).call(this); //Дополняем функционал родительского метода\n      //Устанавливаем слушатель на событие 'submit' формы попапа подтверждения\n\n\n      this._form.addEventListener('submit', function (evt) {\n        //Отменяем стандартное поведение формы при сабмите \n        evt.preventDefault(); //Устанавливаем нужное поведение - вызываем полученный коллбэк\n\n        _this2._submitAction();\n      });\n    }\n  }]);\n\n  return PopupConfirm;\n}(_Popup_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\n\n\n\n//# sourceURL=webpack:///./src/scripts/components/PopupConfirm.js?");

/***/ }),

/***/ "./src/scripts/components/PopupWithForm.js":
/*!*************************************************!*\
  !*** ./src/scripts/components/PopupWithForm.js ***!
  \*************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return PopupWithForm; });\n/* harmony import */ var _Popup_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Popup.js */ \"./src/scripts/components/Popup.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n\n/**\r\n * @module PopupWithForm\r\n * @description Класс PopupWithForm<br>\r\n * Отвечает за попап с формой<br>\r\n * Для каждой формы создается свой экземпляр класса PopupWithForm\r\n * @param {Object} Object - объект с основными параметрами\r\n * @param {Function} Object.formSubmitCallback - коллбэк сабмита формы\r\n * @param {HTMLElement} Object.formElement - DOM-элемент формы\r\n * @param {String} Object.formInputSelector - селектор инпута формы, общий для всех инпутов формы\r\n * @param {String} popupSelector - селектор попапа\r\n * @param {String} closeIconSelector - селектор иконки закрытия попапа\r\n * @param {String} isOpenedModifier - модификатор открытого состояния попапа\r\n * @extends Popup\r\n * @see {@link Popup}\r\n */\n\nvar PopupWithForm = /*#__PURE__*/function (_Popup) {\n  _inherits(PopupWithForm, _Popup);\n\n  var _super = _createSuper(PopupWithForm);\n\n  function PopupWithForm(_ref, popupSelector, closeIconSelector, isOpenedModifier) {\n    var _this;\n\n    var formSubmitCallback = _ref.formSubmitCallback,\n        formElement = _ref.formElement,\n        formInputSelector = _ref.formInputSelector;\n\n    _classCallCheck(this, PopupWithForm);\n\n    _this = _super.call(this, popupSelector, closeIconSelector, isOpenedModifier);\n    _this._callback = formSubmitCallback;\n    _this._form = formElement;\n    _this._formInputSelector = formInputSelector;\n    return _this;\n  }\n  /**\r\n   * @description Приватный метод<br>\r\n   * Собирает значения инпутов формы и возвращает их в виде объекта, в котором ключами к значению инпутов\r\n   * служат имена инпутов - значения атрибута name инпутов<br>\r\n   * {input.name: input.value, input.name: input.value};\r\n   * @private\r\n   * @returns {Object} - объект со значениями инпутов\r\n   */\n\n\n  _createClass(PopupWithForm, [{\n    key: \"_getInputValues\",\n    value: function _getInputValues() {\n      var _this2 = this;\n\n      this._obtainedValues = {};\n      this._formInputsList = Array.from(this._form.querySelectorAll(this._formInputSelector));\n\n      this._formInputsList.forEach(function (input) {\n        _this2._obtainedValues[input.name] = input.value;\n      }); //Возвращает объект со значениями инпутов\n\n\n      return this._obtainedValues;\n    }\n    /**\r\n     * @description Публичный метод<br>\r\n     * Устанавливает слушатели событий \r\n     * @public\r\n     */\n\n  }, {\n    key: \"setEventListeners\",\n    value: function setEventListeners() {\n      var _this3 = this;\n\n      //Вызываем родительский метод\n      _get(_getPrototypeOf(PopupWithForm.prototype), \"setEventListeners\", this).call(this); //Дополняем родительский метод установкой слушателя на submit формы\n\n\n      this._form.addEventListener('submit', function () {\n        //Вызываем полученный колбэк сабмита и передаем ему результат приватного метода _getInputValues\n        // - объект со значениями инпутов формы\n        _this3._callback(_this3._getInputValues());\n      });\n    }\n    /**\r\n     * @description Публичный метод<br>\r\n     * Закрывает попап\r\n     * @public\r\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      //Вызываем родительский метод\n      _get(_getPrototypeOf(PopupWithForm.prototype), \"close\", this).call(this); //Дополняем родительский метод сбросом формы после закрытия попапа\n\n\n      this._form.reset();\n    }\n  }]);\n\n  return PopupWithForm;\n}(_Popup_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\n\n\n\n//# sourceURL=webpack:///./src/scripts/components/PopupWithForm.js?");

/***/ }),

/***/ "./src/scripts/components/PopupWithImage.js":
/*!**************************************************!*\
  !*** ./src/scripts/components/PopupWithImage.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return PopupWithImage; });\n/* harmony import */ var _Popup_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Popup.js */ \"./src/scripts/components/Popup.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n\n/**\r\n * @module PopupWithImage\r\n * @description Класс PopupWithImage<br>\r\n * Отвечает за открытие и закрытие попапа с полноразмерным изображением\r\n * @param {String} popupSelector - селектор попапа\r\n * @param {String} closeIconSelector - селектор иконки закрытия попапа\r\n * @param {String} isOpenedModifier - модификатор открытого состояния попапа\r\n * @param {String} cardImageSelector - селектор изображения карточки\r\n * @param {String} cardTitleSelector - селектор элемента названия карточки\r\n * @extends Popup\r\n * @see {@link Popup}\r\n */\n\nvar PopupWithImage = /*#__PURE__*/function (_Popup) {\n  _inherits(PopupWithImage, _Popup);\n\n  var _super = _createSuper(PopupWithImage);\n\n  function PopupWithImage(popupSelector, closeIconSelector, isOpenedModifier, cardImageSelector, cardTitleSelector) {\n    var _this;\n\n    _classCallCheck(this, PopupWithImage);\n\n    _this = _super.call(this, popupSelector, closeIconSelector, isOpenedModifier);\n    _this._cardImageElement = document.querySelector(cardImageSelector);\n    _this._cardTitleElement = document.querySelector(cardTitleSelector);\n    return _this;\n  }\n  /**\r\n   * @description Публичный метод<br>\r\n   * Открывает попап с полноразмерным изображением<br>\r\n   * Метод принимает аргументом объект с данными изображения карточки\r\n   * @param {Object} Object - объект с данными изображения карточки\r\n   * @param {String} Object.title - название карточки\r\n   * @param {String} Object.link - ссылка на изображение\r\n   */\n\n\n  _createClass(PopupWithImage, [{\n    key: \"open\",\n    value: function open(_ref) {\n      var title = _ref.title,\n          link = _ref.link;\n\n      //Вызываем родительский метод\n      _get(_getPrototypeOf(PopupWithImage.prototype), \"open\", this).call(this); //Присваиваем полученную ссылку элемнту изображения попапа\n\n\n      this._cardImageElement.src = link; //Присваиваем полученное название элементу названия попапа\n\n      this._cardTitleElement.textContent = title;\n    }\n  }]);\n\n  return PopupWithImage;\n}(_Popup_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\n\n\n\n//# sourceURL=webpack:///./src/scripts/components/PopupWithImage.js?");

/***/ }),

/***/ "./src/scripts/components/Section.js":
/*!*******************************************!*\
  !*** ./src/scripts/components/Section.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Section; });\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\r\n * @module Section\r\n * @description Класс Section<br>\r\n * Отвечает за отрисовку элементов на странице\r\n * Принимает в конструктор объект с данными для создания и отрисовки элементов\r\n * @param {Object} Object   - { items, renderer } - объект с данными для отрисовки элементов на странице \r\n * @param {Array} Object.items - Массив объектов, содержащих данные, для создания элементов\r\n * @param {Function} Object.renderer - Коллбэк, создающий элемент и размещающий созданный элемент на странице.<br>\r\n * Принимает на вход объект item с данными для создания элемента.\r\n * @param {String} containerSelector - Селектор контейнера, в который будут размещаться элементы\r\n * @example\r\n * const container = new Section({\r\n *   items: [{object1}, {object2}, {object3}],\r\n *   renderer: someCallback(item)               //где item - объект с данными для создания элемента\r\n * }, '.someSelector');                         //селектор контейнера\r\n */\nvar Section = /*#__PURE__*/function () {\n  function Section(_ref, containerSelector) {\n    var items = _ref.items,\n        renderer = _ref.renderer;\n\n    _classCallCheck(this, Section);\n\n    this._items = items;\n    this._renderer = renderer;\n    this._toContainer = document.querySelector(containerSelector);\n  }\n  /**\r\n   * @description Публичный метод<br>\r\n   * Создает элементы и размещает их на странице<br>\r\n   * Вызывается один раз для отрисовки всех элементов. \r\n   * @public \r\n   */\n\n\n  _createClass(Section, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      this._items.forEach(function (item) {\n        _this._renderer(item, _this._toContainer);\n      });\n    }\n    /**\r\n     * @description Публичный метод<br>\r\n     * Добавляет элемент на страницу<br>\r\n     * Вызывается каждый раз, когда необходимо добавить элемент на страницу\r\n     * @public\r\n     * @param {HTMLElement} domElement - элемент (DOM-нода), который необходимо добавить на страницу \r\n     */\n\n  }, {\n    key: \"addItem\",\n    value: function addItem(domElement) {\n      this._toContainer.prepend(domElement);\n    }\n  }]);\n\n  return Section;\n}();\n\n\n\n//# sourceURL=webpack:///./src/scripts/components/Section.js?");

/***/ }),

/***/ "./src/scripts/components/UserInfo.js":
/*!********************************************!*\
  !*** ./src/scripts/components/UserInfo.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return UserInfo; });\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\r\n * @module UserInfo\r\n * @description Класс UserInfo<br>\r\n * Обрабатывает информацию о пользователе<br>\r\n * Принимает в конструктор параметры для работы с данными пользователя на странице\r\n * @param {HTMLElement} userProfileNode - DOM-элемент, описывающий профиль пользователя\r\n * @param {String} userNameSelector - селектор элемента, содержащего имя пользователя \r\n * @param {String} userJobSelector - селектор элемента, содержащего информацию о пользователе\r\n * @param {String} userAvatarSelector - селектор элемента, содержащего аватар пользователя\r\n * @example\r\n * const userData = new UserInfo(userProfile, userNameSelector, userJobSelector, userAvatarSelector);\r\n */\nvar UserInfo = /*#__PURE__*/function () {\n  function UserInfo(userProfileNode, userNameSelector, userJobSelector, userAvatarSelector) {\n    _classCallCheck(this, UserInfo);\n\n    this._userNameElement = userProfileNode.querySelector(userNameSelector);\n    this._userJobElement = userProfileNode.querySelector(userJobSelector);\n    this._userAvatarElement = userProfileNode.querySelector(userAvatarSelector);\n  }\n  /**\r\n   * @description Публичный метод<br>Возвращает текущую информацию о пользователе, отображенную на странице\r\n   * @public\r\n   * @returns {Object}\r\n   * {name, job} - объект с информацией о пользователе<br>\r\n   * &nbsp{string} object.name - имя пользователя <br>\r\n   * &nbsp{string} object.job - информация о пользователе\r\n   * @example\r\n   * const currentUserInfo = userData.getUserInfo();\r\n   */\n\n\n  _createClass(UserInfo, [{\n    key: \"getUserInfo\",\n    value: function getUserInfo() {\n      return {\n        name: this._userNameElement.textContent,\n        job: this._userJobElement.textContent\n      };\n    }\n    /**\r\n     * @description Публичный метод<br>Размещает новые данные пользователя на странице<br>\r\n     * Принимает на вход объект {name, job, avatar} - содержащий новые данные о пользователе\r\n     * @public\r\n     * @param {Object} Object: {name, job, avatar}\r\n     * @param {String} Object.name - новое имя пользователя\r\n     * @param {String} Object.job - новая информация о пользователе\r\n     * @param {String} Object.avatar - новая ссылка на аватар\r\n     * @example\r\n     * const newUserInfo = userData.setUserInfo({name, job, avatar});\r\n     */\n\n  }, {\n    key: \"setUserInfo\",\n    value: function setUserInfo(_ref) {\n      var name = _ref.name,\n          job = _ref.job,\n          avatar = _ref.avatar;\n      this._userNameElement.textContent = name;\n      this._userJobElement.textContent = job; //Если avatar передан в объекте, то прописываем пользователю новый аватар\n\n      if (avatar) {\n        this._userAvatarElement.style.backgroundImage = \"url(\".concat(avatar, \")\");\n      }\n    }\n  }]);\n\n  return UserInfo;\n}();\n\n\n\n//# sourceURL=webpack:///./src/scripts/components/UserInfo.js?");

/***/ }),

/***/ "./src/scripts/constants/constants.js":
/*!********************************************!*\
  !*** ./src/scripts/constants/constants.js ***!
  \********************************************/
/*! exports provided: editForm, nameInput, jobInput, editFormSubmitButton, addForm, placeTitleInput, imageLinkInput, addFormSubmitButton, userProfile, editButton, addButton, editAvatarButton, editAvatarForm, avatarInput, editAvatarFormSubmitButton, validationConfig, editPopupSelector, addPopupSelector, editAvatarPopupSelector, viewPopupSelector, confirmPopupSelector, cardTemplateSelector, containerSelector, placeImageSelector, placeNameSelector, userNameSelector, userJobSelector, userAvatarSelector, closeIconSelector, isOpenedModifier, confirmFormSelector, formInputSelector, myIdentifier, cardElementsSelectors */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"editForm\", function() { return editForm; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"nameInput\", function() { return nameInput; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"jobInput\", function() { return jobInput; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"editFormSubmitButton\", function() { return editFormSubmitButton; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"addForm\", function() { return addForm; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"placeTitleInput\", function() { return placeTitleInput; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"imageLinkInput\", function() { return imageLinkInput; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"addFormSubmitButton\", function() { return addFormSubmitButton; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"userProfile\", function() { return userProfile; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"editButton\", function() { return editButton; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"addButton\", function() { return addButton; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"editAvatarButton\", function() { return editAvatarButton; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"editAvatarForm\", function() { return editAvatarForm; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"avatarInput\", function() { return avatarInput; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"editAvatarFormSubmitButton\", function() { return editAvatarFormSubmitButton; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"validationConfig\", function() { return validationConfig; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"editPopupSelector\", function() { return editPopupSelector; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"addPopupSelector\", function() { return addPopupSelector; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"editAvatarPopupSelector\", function() { return editAvatarPopupSelector; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"viewPopupSelector\", function() { return viewPopupSelector; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"confirmPopupSelector\", function() { return confirmPopupSelector; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cardTemplateSelector\", function() { return cardTemplateSelector; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"containerSelector\", function() { return containerSelector; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"placeImageSelector\", function() { return placeImageSelector; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"placeNameSelector\", function() { return placeNameSelector; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"userNameSelector\", function() { return userNameSelector; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"userJobSelector\", function() { return userJobSelector; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"userAvatarSelector\", function() { return userAvatarSelector; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"closeIconSelector\", function() { return closeIconSelector; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isOpenedModifier\", function() { return isOpenedModifier; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"confirmFormSelector\", function() { return confirmFormSelector; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"formInputSelector\", function() { return formInputSelector; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"myIdentifier\", function() { return myIdentifier; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cardElementsSelectors\", function() { return cardElementsSelectors; });\n/**\r\n * @namespace constants \r\n * @description Модуль Constants содержит все DOM-элементы, классы, селекторы, которые используются повторно,<br>\r\n * объекты конфигурации для классов, пакеты селекторов для классов.\r\n */\n\n/**\r\n * @memberof constants\r\n * @type {HTMLElement} \r\n * @constant\r\n * @name editForm\r\n * @instance\r\n * @description форма редактирования профиля */\nvar editForm = document.forms['edit-profile-form'];\n/**\r\n * @memberof constants\r\n * @type {HTMLElement} \r\n * @constant\r\n * @name nameInput\r\n * @instance\r\n * @description инпут для ввода имени пользователя в форме редактирования профиля*/\n\nvar nameInput = editForm.elements['user-name-input'];\n/**\r\n * @memberof constants\r\n * @type {HTMLElement} \r\n * @constant\r\n * @name jobInput\r\n * @instance\r\n * @description инпут для ввода информации \"О пользователе\" в форме редактирования профиля*/\n\nvar jobInput = editForm.elements['user-job-input'];\n/**\r\n * @memberof constants\r\n * @type {HTMLElement} \r\n * @constant\r\n * @name editFormSubmitButton\r\n * @instance\r\n * @description кнопка submit формы редактирования профиля*/\n\nvar editFormSubmitButton = editForm.querySelector('.button_type_submit');\n/**\r\n * @memberof constants\r\n * @type {HTMLElement}\r\n * @constant\r\n * @name addForm \r\n * @instance\r\n * @description форма добавления карточки*/\n\nvar addForm = document.forms['add-photo-form'];\n/**\r\n * @memberof constants\r\n * @type {HTMLElement} \r\n * @constant\r\n * @name placeTitleInput\r\n * @instance\r\n * @description инпут для ввода названия карточки в форме добавления карточки*/\n\nvar placeTitleInput = addForm.elements['place-title-input'];\n/**\r\n * @memberof constants\r\n * @type {HTMLElement} \r\n * @constant\r\n * @name imageLinkInput\r\n * @instance\r\n * @description инпут для ввода ссылки на изображение в форме добавления карточки*/\n\nvar imageLinkInput = addForm.elements['image-link-input'];\n/**\r\n * @memberof constants\r\n * @type {HTMLElement} \r\n * @constant\r\n * @name addFormSubmitButton\r\n * @instance\r\n * @description кнопка submit формы добавления карточки*/\n\nvar addFormSubmitButton = addForm.querySelector('.button_type_submit');\n/**\r\n * @memberof constants\r\n * @type {HTMLElement} \r\n * @constant\r\n * @name userProfile\r\n * @instance\r\n * @description блок отображения и редактирования профиля пользователя*/\n\nvar userProfile = document.querySelector('.user-profile');\n/**\r\n * @memberof constants\r\n * @type {HTMLElement} \r\n * @constant\r\n * @name editButton\r\n * @instance\r\n * @description кнопка, открывающая попап редактирования профиля пользователя*/\n\nvar editButton = userProfile.querySelector('.user-profile__edit-button');\n/**\r\n * @memberof constants\r\n * @type {HTMLElement} \r\n * @constant\r\n * @name addButton\r\n * @instance\r\n * @description кнопка, открывающая попап добавления новой карточки*/\n\nvar addButton = userProfile.querySelector('.user-profile__add-button');\n/**\r\n * @memberof constants\r\n * @type {HTMLElement} \r\n * @constant\r\n * @name editAvatarButton\r\n * @instance\r\n * @description кнопка, открывающая попап редактирования аватара*/\n\nvar editAvatarButton = userProfile.querySelector('.user-profile__avatar-button');\n/**\r\n * @memberof constants\r\n * @type {HTMLElement} \r\n * @constant\r\n * @name editAvatarForm\r\n * @instance\r\n * @description форма редактирования аватара пользователя*/\n\nvar editAvatarForm = document.forms['edit-avatar-form'];\n/**\r\n * @memberof constants\r\n * @type {HTMLElement} \r\n * @constant\r\n * @name avatarInput\r\n * @instance\r\n * @description инпут для ввода новой ссылки на аватар пользователя в форме редактирования аватара пользователя*/\n\nvar avatarInput = editAvatarForm.elements['avatar-link-input'];\n/**\r\n * @memberof constants\r\n * @type {HTMLElement} \r\n * @constant\r\n * @name editAvatarFormSubmitButton\r\n * @instance\r\n * @description кнопка submit формы редактирования аватара пользователя\r\n */\n\nvar editAvatarFormSubmitButton = editAvatarForm.querySelector('.button_type_submit');\n/**\r\n * @memberof constants\r\n * @type {Object} \r\n * @constant\r\n * @name validationConfig\r\n * @instance\r\n * @description объект, содержащий данные для запуска валидации форм\r\n * @property {Object} config\r\n * @property {String} config.inputSelector - селектор инпута формы, общий для всех инпутов\r\n * @property {String} config.submitButtonSelector - селектор кнопки отправки формы (submit)\r\n * @property {String} config.inactiveButtonClass - css класс, устанавливающй неактивное состояние кнопки submit\r\n * @property {String} config.inputErrorClass - css класс, устанавливающй невалидное состояние инпута\r\n * @property {String} config.errorClass - css класс, устанавливающй активное состояние элемента, содержащего текст ошибки\r\n */\n\nvar validationConfig = {\n  inputSelector: '.form__input',\n  submitButtonSelector: '.form__submit-button',\n  inactiveButtonClass: 'button_type_submit-inactive',\n  inputErrorClass: 'form__input_type_error',\n  errorClass: 'form__input-error_active'\n};\n/**\r\n * @memberof constants\r\n * @type {String} \r\n * @constant\r\n * @name editPopupSelector\r\n * @instance\r\n * @description селектор попапа редактирования профиля пользователя*/\n\nvar editPopupSelector = '.popup_type_edit-profile';\n/**\r\n * @memberof constants\r\n * @type {String} \r\n * @constant\r\n * @name addPopupSelector\r\n * @instance\r\n * @description селектор попапа добавления карточки*/\n\nvar addPopupSelector = '.popup_type_add-photo';\n/**\r\n * @memberof constants\r\n * @type {String} \r\n * @constant\r\n * @name editAvatarPopupSelector\r\n * @instance\r\n * @description селектор попапа редактирования аватара пользователя*/\n\nvar editAvatarPopupSelector = '.popup_type_edit-avatar';\n/**\r\n * @memberof constants\r\n * @type {String} \r\n * @constant\r\n * @name viewPopupSelector\r\n * @instance\r\n * @description селектор попапа открытия полноразмерного изображения*/\n\nvar viewPopupSelector = '.popup_type_view-photo';\n/**\r\n * @memberof constants\r\n * @type {String} \r\n * @constant\r\n * @name confirmPopupSelector\r\n * @instance\r\n * @description селектор попапа подтверждения действия*/\n\nvar confirmPopupSelector = '.popup_type_confirm';\n/**\r\n * @memberof constants\r\n * @type {String} \r\n * @constant\r\n * @name cardTemplateSelector\r\n * @instance\r\n * @description селектор шаблона элемента карточки*/\n\nvar cardTemplateSelector = '#card-template';\n/**\r\n * @memberof constants\r\n * @type {String} \r\n * @constant\r\n * @name containerSelector\r\n * @instance\r\n * @description селектор контейнера, в который добавляются карточки*/\n\nvar containerSelector = '.photo__cards';\n/**\r\n * @memberof constants\r\n * @type {String} \r\n * @constant\r\n * @name placeImageSelector\r\n * @instance\r\n * @description селектор элемента изображения в попапе открытия полноразмерного изображения*/\n\nvar placeImageSelector = '.popup__place-image';\n/**\r\n * @memberof constants\r\n * @type {String} \r\n * @constant\r\n * @name placeNameSelector\r\n * @instance\r\n * @description селектор элемента названия изображения в попапе открытия полноразмерного изображения */\n\nvar placeNameSelector = '.popup__place-name';\n/**\r\n * @memberof constants\r\n * @type {String} \r\n * @constant\r\n * @name userNameSelector\r\n * @instance\r\n * @description селектор элемента, содержащего имя пользователя в блоке профиля пользователя*/\n\nvar userNameSelector = '.user-profile__user-name';\n/**\r\n * @memberof constants\r\n * @type {String} \r\n * @constant\r\n * @name userJobSelector\r\n * @instance\r\n * @description селектор элемента, содержащего информацию о пользователе в блоке профиля пользователя*/\n\nvar userJobSelector = '.user-profile__user-job';\n/**\r\n * @memberof constants\r\n * @type {String} \r\n * @constant\r\n * @name userAvatarSelector\r\n * @instance\r\n * @description селектор аватара пользователя в блоке профиля пользователя*/\n\nvar userAvatarSelector = '.user-profile__avatar-button';\n/**\r\n * @memberof constants\r\n * @type {String} \r\n * @constant\r\n * @name closeIconSelector\r\n * @instance\r\n * @description селектор иконки закрытия попапов*/\n\nvar closeIconSelector = '.button_type_close';\n/**\r\n * @memberof constants\r\n * @type {String} \r\n * @constant\r\n * @name isOpenedModifier\r\n * @instance\r\n * @description модификатор, добавляемый в список css-классов попапа при его открытии. \r\n * Включает отображение попапа на экране*/\n\nvar isOpenedModifier = 'popup_opened';\n/**\r\n * @memberof constants\r\n * @type {String} \r\n * @constant\r\n * @name confirmFormSelector\r\n * @instance\r\n * @description селектор формы в попапе подтверждения действия*/\n\nvar confirmFormSelector = 'confirm-form';\n/**\r\n * @memberof constants\r\n * @type {String} \r\n * @constant\r\n * @name formInputSelector\r\n * @instance \r\n * @description селектор инпутов формы, общий для всех инпутов всех форм*/\n\nvar formInputSelector = '.form__input';\n/**\r\n * @memberof constants\r\n * @type {Object} \r\n * @constant\r\n * @name myIdentifier\r\n * @instance\r\n * @description пустой объект, в который будут сохраняться персональные данные пользователя, вошедшего в свой аккаунт*/\n\nvar myIdentifier = {};\n/**\r\n * @memberof constants\r\n * @property {Object} cardElementsSelectors\r\n * @constant\r\n * @name cardElementsSelectors\r\n * @instance\r\n * @description объект<br>пакет селекторов, необходимых для создания карточки и работы с ней\r\n * @property {String} cardElementsSelectors.cardSelector селектор карточки\r\n * @property {String} cardElementsSelectors.deleteIconSelector селектор иконки удаления \r\n * @property {String} cardElementsSelectors.cardImageSelector селектор изображения карточки\r\n * @property {String} cardElementsSelectors.likeIconSelector - селектор иконки \"лайк\"\r\n * @property {String} cardElementsSelectors.cardTitleSelector - селектор элемента названия карточки\r\n * @property {String} cardElementsSelectors.isLikedModifier - модификатор, окрашивающий \"лайк\" в черный цвет, если \"лайк\" в активном состоянии\r\n * @property {String} cardElementsSelectors.likeCounterSelector - селектор счетчика \"лайков\"\r\n * @property {String} cardElementsSelectors.delButtonEnabledSelector - селектор активного состояния иконки удаления\r\n */\n\nvar cardElementsSelectors = {\n  cardSelector: '.card',\n  deleteIconSelector: '.button_type_delete',\n  cardImageSelector: '.card__image',\n  likeIconSelector: '.button_type_like',\n  cardTitleSelector: '.card__title',\n  isLikedModifier: 'button_like-status_checked',\n  likeCounterSelector: '.card__like-counter',\n  delButtonEnabledSelector: 'card__delete-button_enabled'\n};\n\n//# sourceURL=webpack:///./src/scripts/constants/constants.js?");

/***/ }),

/***/ "./src/scripts/index.js":
/*!******************************!*\
  !*** ./src/scripts/index.js ***!
  \******************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _pages_index_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../pages/index.css */ \"./src/pages/index.css\");\n/* harmony import */ var _pages_index_css__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_pages_index_css__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _constants_constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants/constants.js */ \"./src/scripts/constants/constants.js\");\n/* harmony import */ var _components_Card_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./components/Card.js */ \"./src/scripts/components/Card.js\");\n/* harmony import */ var _components_FormValidator_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./components/FormValidator.js */ \"./src/scripts/components/FormValidator.js\");\n/* harmony import */ var _components_PopupWithImage_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./components/PopupWithImage.js */ \"./src/scripts/components/PopupWithImage.js\");\n/* harmony import */ var _components_PopupWithForm_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./components/PopupWithForm.js */ \"./src/scripts/components/PopupWithForm.js\");\n/* harmony import */ var _components_UserInfo_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./components/UserInfo.js */ \"./src/scripts/components/UserInfo.js\");\n/* harmony import */ var _components_Section_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./components/Section.js */ \"./src/scripts/components/Section.js\");\n/* harmony import */ var _components_Api_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./components/Api.js */ \"./src/scripts/components/Api.js\");\n/* harmony import */ var _components_PopupConfirm_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./components/PopupConfirm.js */ \"./src/scripts/components/PopupConfirm.js\");\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n/**@namespace index \r\n * @description Входной файл проекта<br>\r\n * Здесь собран весь императивный код проекта.\r\n */\n\n\n\n\n\n\n\n\n\n\n/**\r\n * @description Функция Preloader<br>\r\n * Показывает пользователю, что его запрос выполняется<br>\r\n * Изменяет надпись на кнопке сабмит на \"Выполняется...\"\r\n * @memberof index\r\n * @instance\r\n * @function\r\n * @name preloader\r\n * @param {HTMLElement} submitButton - кнопка submit в формы\r\n * @param {Boolean} isLoading - маркер состояния загрузки: true- загрузка происходит, false- загрузка не происходит\r\n */\n\nfunction preloader(submitButton, isLoading) {\n  if (isLoading) {\n    submitButton.textContent = 'Сохранение...';\n  } else {\n    submitButton.textContent = submitButton.value;\n  }\n}\n/**\r\n * @description Экземпляр класса Api<br>\r\n * API для обмена информацией с сервером\r\n * @constant\r\n * @name api\r\n * @memberof index\r\n * @instance\r\n * @see {@link Api}\r\n */\n\n\nvar api = new _components_Api_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"]({\n  URLs: {\n    baseURL: 'https://mesto.nomoreparties.co/v1/cohort-14/',\n    cardsURL: 'https://mesto.nomoreparties.co/v1/cohort-14/cards/',\n    userURL: 'https://mesto.nomoreparties.co/v1/cohort-14/users/me',\n    likesURL: 'https://mesto.nomoreparties.co/v1/cohort-14/cards/likes/',\n    avatarURL: 'https://mesto.nomoreparties.co/v1/cohort-14/users/me/avatar'\n  },\n  headers: {\n    \"authorization\": '85abb6e6-ccb0-45c7-b6e8-4ffe1f5da546'\n  },\n  token: '85abb6e6-ccb0-45c7-b6e8-4ffe1f5da546'\n});\n/**\r\n * @description Экземпляр класса PopupConfirm<br>\r\n * Попап подтверждения действия\r\n * @constant\r\n * @name confirmPopup\r\n * @memberof index\r\n * @instance\r\n * @see {@link PopupConfirm}\r\n */\n\nvar confirmPopup = new _components_PopupConfirm_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"](_constants_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"confirmPopupSelector\"], _constants_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"closeIconSelector\"], _constants_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"isOpenedModifier\"], _constants_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"confirmFormSelector\"]);\n/**\r\n * @description Экземпляр класса UserInfo<br>\r\n * Даные о пользователе\r\n * @constant\r\n * @name userData\r\n * @memberof index\r\n * @instance\r\n * @see {@link UserInfo}\r\n */\n\nvar userData = new _components_UserInfo_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"](_constants_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"userProfile\"], _constants_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"userNameSelector\"], _constants_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"userJobSelector\"], _constants_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"userAvatarSelector\"]);\n/**\r\n * @description Экземпляр класса FormValidator<br>\r\n * Валидатор формы редактирования профиля\r\n * @constant\r\n * @name formEditValidator\r\n * @memberof index\r\n * @instance\r\n * @see {@link FormValidator}\r\n */\n\nvar formEditValidator = new _components_FormValidator_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"](_constants_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"validationConfig\"], _constants_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"editForm\"]);\n/**\r\n * @description Экземпляр класса FormValidator<br>\r\n * Валидатор формы добавления карточки\r\n * @constant\r\n * @name formAddValidator\r\n * @memberof index\r\n * @instance\r\n * @see {@link FormValidator}\r\n */\n\nvar formAddValidator = new _components_FormValidator_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"](_constants_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"validationConfig\"], _constants_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"addForm\"]);\n/**\r\n * @description Экземпляр класса FormValidator<br>\r\n * Валидатор формы редактирования аватара пользователя\r\n * @constant\r\n * @name formEditAvatarValidator\r\n * @memberof index\r\n * @instance\r\n * @see {@link FormValidator}\r\n */\n\nvar formEditAvatarValidator = new _components_FormValidator_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"](_constants_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"validationConfig\"], _constants_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"editAvatarForm\"]);\n/**\r\n * @description Экземпляр класса PopupWithImage<br>\r\n * Попап полноразмерного изображения карточки\r\n * @constant\r\n * @name viewPopup\r\n * @memberof index\r\n * @instance\r\n * @see {@link PopupWithImage}\r\n */\n\nvar viewPopup = new _components_PopupWithImage_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"](_constants_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"viewPopupSelector\"], _constants_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"closeIconSelector\"], _constants_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"isOpenedModifier\"], _constants_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"placeImageSelector\"], _constants_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"placeNameSelector\"]);\n/**\r\n * @description Экземпляр класса PopupWithForm<br>\r\n * Попап редактирования профиля пользователя\r\n * @constant\r\n * @name editPopup\r\n * @memberof index\r\n * @instance\r\n * @see {@link PopupWithForm}\r\n * \r\n */\n\nvar editPopup = new _components_PopupWithForm_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"]({\n  formSubmitCallback: // Коллбэк сабмита формы. \n  //Принимает на вход объект с данными, введеными пользователем в форме редактирования профиля\n  function formSubmitCallback(newData) {\n    //Вызываем Preloader\n    preloader(_constants_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"editFormSubmitButton\"], true); //Отправляем запрос на редактирование профиля пользователя на сервер\n\n    api.editProfile({\n      name: newData[_constants_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"nameInput\"].name],\n      job: newData[_constants_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"jobInput\"].name]\n    }) //Запрос выполнен успешно\n    .then(function (resData) {\n      //Деструктурируем полученные от сервера данные\n      var name = resData.name,\n          job = resData.about; //Устанавливаем на страницу новые данные пользователя\n\n      userData.setUserInfo({\n        name: name,\n        job: job\n      }); //Закрываем попап\n\n      editPopup.close();\n    }).catch(function (err) {\n      console.log(err);\n    }).finally(function () {\n      //Останавливаем Preloader\n      preloader(_constants_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"editFormSubmitButton\"], false);\n    });\n  },\n  formElement: _constants_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"editForm\"],\n  formInputSelector: _constants_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"formInputSelector\"]\n}, _constants_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"editPopupSelector\"], _constants_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"closeIconSelector\"], _constants_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"isOpenedModifier\"]);\n/**\r\n * @description Экземпляр класса PopupWithForm<br>\r\n * Попап редактирования аватара пользователя\r\n * @constant\r\n * @name editAvatarPopup\r\n * @memberof index\r\n * @instance\r\n * @see {@link PopupWithForm}\r\n */\n\nvar editAvatarPopup = new _components_PopupWithForm_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"]({\n  formSubmitCallback: //Коллбэк сабмита формы\n  //Принимает аргументом новую ссылку на аватар пользователя, введеную в форме редактирования аватара\n  function formSubmitCallback(newAvatar) {\n    //Вызываем Preloader\n    preloader(_constants_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"editAvatarFormSubmitButton\"], true); //Отправляем запрос на редактирование аватара на сервер\n\n    api.editAvatar(newAvatar[_constants_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"avatarInput\"].name]) //Запрос выполнен успешно\n    .then(function (res) {\n      //Деструктурируем полученные от сервера данные\n      var name = res.name,\n          job = res.about,\n          avatar = res.avatar; //Устанавливаем на страницу новые данные пользователя\n\n      userData.setUserInfo({\n        name: name,\n        job: job,\n        avatar: avatar\n      }); //Закрываем попап\n\n      editAvatarPopup.close();\n    }).catch(function (err) {\n      console.log(err);\n    }).finally(function () {\n      //Останавливаем Preloader\n      preloader(_constants_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"editAvatarFormSubmitButton\"], false);\n    });\n  },\n  formElement: _constants_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"editAvatarForm\"],\n  formInputSelector: _constants_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"formInputSelector\"]\n}, _constants_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"editAvatarPopupSelector\"], _constants_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"closeIconSelector\"], _constants_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"isOpenedModifier\"]);\n/**\r\n * @function createCard\r\n * @description Функция createCard<br>\r\n * Создает карточку, наполняет ее контентом, устанавливает слушатели на элементы карточки.<br>\r\n * Возвращает готовую для размещения на странице карточку\r\n * @memberof index\r\n * @instance\r\n * \r\n * @name createCard\r\n * @param {Object} item - объект, содержащий данные карточки, полученные от сервера\r\n * @param {Object} item.owner - объект, содержащий данные о собственнике карточки\r\n * @param {Array} item.likes - массив, элементы массива - id пользователей, поставивших \"лайк\" карточке\r\n * @param {String} item.id - id карточки\r\n * @param {String} item.name - название карточки\r\n * @param {String} item.link - ссылка на изображение карточки\r\n * @returns {HTMLElement} - карточка, полностью готовая к размещению на странице\r\n */\n\nfunction createCard(item) {\n  /**\r\n   * @description Переменная isOwner<br>\r\n   * Введена для сортировки карточек<br>\r\n   * По умолчанию имеет значение false<br>\r\n   * Принимает значение true, если пользователь является владельцем карточки\r\n   * @type {Boolean}\r\n   * @name isOwner\r\n   * @private \r\n   */\n  var isOwner = false;\n  /**\r\n   * @description Переменная likesQuantity<br>\r\n   * Показывает количество \"лайков\" у карточки<br>\r\n   * Принимает значение равное длине массива с \"лайками\"\r\n   * @type {Number}\r\n   * @name likesQuantity\r\n   * @private \r\n   */\n\n  var likesQuantity = item.likesArray.length;\n  /**\r\n   * @description Определяем - является ли пользователь владельцем карточки<br>\r\n   * Если id пользователя = id собственника карточки, переменной isOwner присваивается значение true\r\n   * @private\r\n   */\n\n  if (_constants_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"myIdentifier\"].id === item.owner._id) {\n    isOwner = true;\n  }\n  /**\r\n   * @description Переменная isLiked<br>\r\n   * Введена для определения была ли карточка \"лайкнута\" пользователем<br>\r\n   * Если в массиве лайков карточки присутствует id пользователя, переменная принимает значение true\r\n   * @name isLiked\r\n   * @type {Boolean}\r\n   * @private\r\n   */\n\n\n  var isLiked = item.likesArray.some(function (owner) {\n    return owner._id === _constants_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"myIdentifier\"].id;\n  });\n  /**\r\n   * @description Экземпляр класса Card<br>\r\n   * Создает карточку\r\n   * @constant\r\n   * @name cardNode\r\n   * @type {HTMLElement}\r\n   * @see {@link Card}\r\n   * @memberof index\r\n   * @instance\r\n   * \r\n   */\n\n  var cardNode = new _components_Card_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n    //Объект item, содержит информацию о карточке\n    data: item,\n    handleCardClick: // Коллбэк клика по изображению карточки. Открывает попап полноразмерного изображения карточки\n    function handleCardClick(CardData) {\n      return viewPopup.open(CardData);\n    },\n    handleClickDeleteIcon: // Коллбэк клика по иконке удаления карточки. Открывает попап подтверждения действия (удаления)\n    function handleClickDeleteIcon() {\n      return confirmPopup.open();\n    },\n    setSubmitAction: // Коллбэк, определяющий действие при сабмите формы подтверждения действия (удаления)\n    function setSubmitAction(id, card) {\n      return confirmPopup.setSubmitAction(function () {\n        //Отправляем запрос на удаление карточки на сервер\n        api.deleteCard(id).then(function (res) {\n          // Удаляем карточку\n          card.remove(); //Зануляем ссылку на карточку\n\n          card = null; //Закрываем попап подтверждения действия\n\n          confirmPopup.close();\n        }).catch(function (err) {\n          console.log(err);\n        });\n      });\n    },\n    handleClickLikeIcon: //Коллбэк клика по иконке \"лайк\"\n    //Принимает аргументы: \n    ////id - id карточки, \n    ////likeIcon - элемент иконки \"лайк\",\n    //// likeCounter - элемент счетчик \"лайков\",\n    //// isLikedModifier - модификатор активного \"лайка\",\n    //// likeChecked - маркер, показывающий, что пользователь поставил \"лайк\" карточке\n    function handleClickLikeIcon(id, likeIcon, likeCounter, isLikedModifier, likeChecked) {\n      //Если лайк был поставлен пользователем, и пользователь повторно нажал на \"лайк\" -> значит пользователь снял \"лайк\"\n      if (likeChecked) {\n        //Отправляем запрос на удаление \"лайка\" на сервер\n        api.deleteLike(id) //Запрос выполнен успешно\n        .then(function (res) {\n          //Удаляем модификатор активного \"лайка\" из списка css-классов \"лайка\"\n          likeIcon.classList.remove(isLikedModifier); //Счетчику лайков присваиваем актуальное значение количетсва \"лайков\"\n\n          likeCounter.textContent = res.likes.length;\n        }).catch(function (err) {\n          console.log(err);\n        });\n      } else {\n        //Отпрвляем запрос на добавление \"лайка\" на сервер\n        api.loadLike(id) //Запрос выполнен успешно\n        .then(function (res) {\n          //Добавляем модификатор активного \"лайка\" в список css-классов \"лайка\"\n          likeIcon.classList.add(isLikedModifier); //Счетчику лайков присваиваем актуальное значение количетсва \"лайков\"\n\n          likeCounter.textContent = res.likes.length;\n        }).catch(function (err) {\n          console.log(err);\n        });\n      }\n    }\n  }, _constants_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"cardTemplateSelector\"], _constants_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"cardElementsSelectors\"], isOwner, isLiked, likesQuantity); //Генерируем карточку и сохраняем ее в переменную cardElement\n\n  var cardElement = cardNode.generateCard(); //Возвращаем готовую карточку\n\n  return cardElement;\n} //Отправляем на сервер запросы на загрузку данных пользователя и карточек\n\n\nPromise.all([api.loadUserData(), api.loadCards()]) //Обрабатываем полученные данные после успешного выполнения всех запросов\n.then(function (_ref) {\n  var _ref2 = _slicedToArray(_ref, 2),\n      currentUserData = _ref2[0],\n      cardData = _ref2[1];\n\n  //Фиксируем id пользователя\n  _constants_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"myIdentifier\"].id = currentUserData._id; //Деструктурируем полученные данные пользователя \n\n  var name = currentUserData.name,\n      job = currentUserData.about,\n      avatar = currentUserData.avatar; //Размещаем полученные данные пользователя на странице\n\n  userData.setUserInfo({\n    name: name,\n    job: job,\n    avatar: avatar\n  });\n  /**\r\n   * @description Экземпляр класса Section<br>\r\n   * Создает контейнер с карточками\r\n   * @constant\r\n   * @name cardsContainer\r\n   * @memberof index\r\n   * @instance\r\n   * @see {@link Section}\r\n   */\n\n  var cardsContainer = new _components_Section_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"]({\n    //объект cardData - объект с данными карточек, полученный от сервера\n    items: cardData,\n    //коллбэк; создает карточку и размещает ее на странице. Принимает аргументом объект с данными карточки\n    renderer: function renderer(cardDataItem) {\n      //Деструктурируем объект с данными карточки\n      var title = cardDataItem.name,\n          link = cardDataItem.link,\n          owner = cardDataItem.owner,\n          id = cardDataItem._id,\n          likesArray = cardDataItem.likes; //Создаем карточку\n\n      var card = createCard({\n        title: title,\n        link: link,\n        owner: owner,\n        id: id,\n        likesArray: likesArray\n      }); //Размещаем карточку на сраницу\n\n      cardsContainer.addItem(card);\n    }\n  }, _constants_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"containerSelector\"]);\n  /**\r\n   * @description Экземпляр класса PopupWithForm<br>\r\n   * Попап добавления новой карточки\r\n   * @constant\r\n   * @name addPopup\r\n   * @memberof index\r\n   * @instance\r\n   * @see {@link PopupWithForm}\r\n   * \r\n   */\n\n  var addPopup = new _components_PopupWithForm_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"]({\n    formSubmitCallback: //Коллбэк сабмита формы. Принимает аргументом объект newCardData с новыми данными карточки, \n    //введеными пользователем в форме добавления карточки\n    function formSubmitCallback(newCardData) {\n      //Вызываем preloader\n      preloader(_constants_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"addFormSubmitButton\"], true); //Отправляем запрос на сервер на добавление новой карточки\n\n      api.addNewCard({\n        name: newCardData[_constants_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"placeTitleInput\"].name],\n        link: newCardData[_constants_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"imageLinkInput\"].name]\n      }) //Запрос выполнен успешно\n      .then(function (obtainedNewCardData) {\n        //Деструктурируем полученные от сервера данные\n        var title = obtainedNewCardData.name,\n            link = obtainedNewCardData.link,\n            owner = obtainedNewCardData.owner,\n            id = obtainedNewCardData._id,\n            likesArray = obtainedNewCardData.likes; //Создаем новую карточку\n\n        var card = createCard({\n          title: title,\n          link: link,\n          owner: owner,\n          id: id,\n          likesArray: likesArray\n        }); //Публикуем новую карточку на странице\n\n        cardsContainer.addItem(card); //Закрываем попап\n\n        addPopup.close();\n      }).catch(function (err) {\n        console.log(err);\n      }).finally(function () {\n        //Останавливаем preloader \n        preloader(_constants_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"addFormSubmitButton\"], false);\n      });\n    },\n    formElement: _constants_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"addForm\"],\n    formInputSelector: _constants_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"formInputSelector\"]\n  }, _constants_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"addPopupSelector\"], _constants_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"closeIconSelector\"], _constants_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"isOpenedModifier\"]); //Устанавливаем слушатели событий\n\n  addPopup.setEventListeners(); //Клик по кнопке добавления карточки - открывает попап добавления новой карточки\n\n  _constants_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"addButton\"].addEventListener('click', function () {\n    return addPopup.open();\n  }); //Отрисовываем контейнер с карточками\n\n  cardsContainer.render();\n}).catch(function (err) {\n  console.log(err);\n}); // СЛУШАТЕЛИ НА КНОПКИ\n//Клик по кнопке редактирования профиля пользователя\n\n_constants_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"editButton\"].addEventListener('click', function () {\n  //Получаем текущие данные пользователя со страницы \n  var _userData$getUserInfo = userData.getUserInfo(),\n      name = _userData$getUserInfo.name,\n      job = _userData$getUserInfo.job; //Подставляем их в инпуты формы редактирования профиля\n\n\n  _constants_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"nameInput\"].value = name;\n  _constants_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"jobInput\"].value = job; //Открываем попап\n\n  editPopup.open();\n}); //Клик по аватару\n\n_constants_constants_js__WEBPACK_IMPORTED_MODULE_1__[\"editAvatarButton\"].addEventListener('click', function () {\n  //Открываем попап редактирования аватара\n  editAvatarPopup.open();\n}); //запускаем валидацию форм\n\nformEditValidator.enableValidation();\nformAddValidator.enableValidation();\nformEditAvatarValidator.enableValidation(); //Устанавливаем слушатели событий на попапы\n\nviewPopup.setEventListeners();\neditPopup.setEventListeners();\nconfirmPopup.setEventListeners();\neditAvatarPopup.setEventListeners();\n\n//# sourceURL=webpack:///./src/scripts/index.js?");

/***/ })

/******/ });